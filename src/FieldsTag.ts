/**
 * FieldsTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {ErrorException} from "./ErrorException";
import {Field} from "./Field";

export class FieldsTag extends TagAbstract {
    /**
     * @returns {Promise<Field>}
     * @throws {ErrorExceptionException}
     * @throws {ClientException}
     */
    public async create(baseId: string, tableId: string, payload: Field): Promise<Field> {
        const url = this.parser.url('/v0/meta/bases/:baseId/tables/:tableId/fields', {
            'baseId': baseId,
            'tableId': tableId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Field>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 400:
                        throw new ErrorException(error.response.data);
                    case 403:
                        throw new ErrorException(error.response.data);
                    case 404:
                        throw new ErrorException(error.response.data);
                    case 500:
                        throw new ErrorException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<Field>}
     * @throws {ErrorExceptionException}
     * @throws {ClientException}
     */
    public async update(baseId: string, tableId: string, columnId: string, payload: Field): Promise<Field> {
        const url = this.parser.url('/v0/meta/bases/:baseId/tables/:tableId/fields/:columnId', {
            'baseId': baseId,
            'tableId': tableId,
            'columnId': columnId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'PATCH',
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Field>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 400:
                        throw new ErrorException(error.response.data);
                    case 403:
                        throw new ErrorException(error.response.data);
                    case 404:
                        throw new ErrorException(error.response.data);
                    case 500:
                        throw new ErrorException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
