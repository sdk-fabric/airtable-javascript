/**
 * TablesTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Error} from "./Error";
import {ErrorException} from "./ErrorException";
import {Table} from "./Table";

export class TablesTag extends TagAbstract {
    /**
     * Creates a new table and returns the schema for the newly created table.
     *
     * @returns {Promise<Table>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async create(baseId: string, payload: Table): Promise<Table> {
        const url = this.parser.url('/v0/meta/bases/:baseId/tables', {
            'baseId': baseId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Table;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates the name and/or description of a table. At least one of name or description must be specified.
     *
     * @returns {Promise<Table>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async update(baseId: string, tableIdOrName: string, payload: Table): Promise<Table> {
        const url = this.parser.url('/v0/meta/bases/:baseId/tables/:tableIdOrName', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Table;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
