/**
 * CommentsTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Comment} from "./Comment";
import {CommentCollection} from "./CommentCollection";
import {CommentDeleteResponse} from "./CommentDeleteResponse";

export class CommentsTag extends TagAbstract {
    /**
     * @returns {Promise<CommentCollection>}
     * @throws {ClientException}
     */
    public async getAll(baseId: string, tableIdOrName: string, recordId: string): Promise<CommentCollection> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<CommentCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<Comment>}
     * @throws {ClientException}
     */
    public async create(baseId: string, tableIdOrName: string, recordId: string, payload: Comment): Promise<Comment> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Comment>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<Comment>}
     * @throws {ClientException}
     */
    public async update(baseId: string, tableIdOrName: string, recordId: string, rowCommentId: string, payload: Comment): Promise<Comment> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
            'rowCommentId': rowCommentId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'PATCH',
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Comment>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<CommentDeleteResponse>}
     * @throws {ClientException}
     */
    public async delete(baseId: string, tableIdOrName: string, recordId: string, rowCommentId: string): Promise<CommentDeleteResponse> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
            'rowCommentId': rowCommentId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'DELETE',
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<CommentDeleteResponse>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
