/**
 * CommentsTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Comment} from "./Comment";
import {CommentCollection} from "./CommentCollection";
import {DeleteResponse} from "./DeleteResponse";
import {Error} from "./Error";
import {ErrorException} from "./ErrorException";

export class CommentsTag extends TagAbstract {
    /**
     * Returns a list of comments for the record from newest to oldest.
     *
     * @returns {Promise<CommentCollection>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async getAll(baseId: string, tableIdOrName: string, recordId: string): Promise<CommentCollection> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommentCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Creates a comment on a record. User mentioned is supported.
     *
     * @returns {Promise<Comment>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async create(baseId: string, tableIdOrName: string, recordId: string, payload: Comment): Promise<Comment> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Comment;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates a comment on a record. API users can only update comments they have created. User mentioned is supported.
     *
     * @returns {Promise<Comment>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async update(baseId: string, tableIdOrName: string, recordId: string, rowCommentId: string, payload: Comment): Promise<Comment> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
            'rowCommentId': rowCommentId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Comment;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Deletes a comment from a record. Non-admin API users can only delete comments they have created. Enterprise Admins can delete any comment from a record.
     *
     * @returns {Promise<DeleteResponse>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async delete(baseId: string, tableIdOrName: string, recordId: string, rowCommentId: string): Promise<DeleteResponse> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId/comments/:rowCommentId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
            'rowCommentId': rowCommentId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as DeleteResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
