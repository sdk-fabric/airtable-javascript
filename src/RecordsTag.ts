/**
 * RecordsTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BulkUpdateRequest} from "./BulkUpdateRequest";
import {BulkUpdateResponse} from "./BulkUpdateResponse";
import {DeleteResponse} from "./DeleteResponse";
import {Error} from "./Error";
import {ErrorException} from "./ErrorException";
import {Record} from "./Record";
import {RecordCollection} from "./RecordCollection";

export class RecordsTag extends TagAbstract {
    /**
     * List records in a table. Note that table names and table ids can be used interchangeably. We recommend using table IDs so you don't need to modify your API request when your table name changes.
     *
     * @returns {Promise<RecordCollection>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async getAll(baseId: string, tableIdOrName: string, timeZone?: string, userLocale?: string, pageSize?: number, maxRecords?: number, offset?: string, view?: string, sort?: string, filterByFormula?: string, cellFormat?: string, fields?: string, returnFieldsByFieldId?: boolean, recordMetadata?: string): Promise<RecordCollection> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'timeZone': timeZone,
                'userLocale': userLocale,
                'pageSize': pageSize,
                'maxRecords': maxRecords,
                'offset': offset,
                'view': view,
                'sort': sort,
                'filterByFormula': filterByFormula,
                'cellFormat': cellFormat,
                'fields': fields,
                'returnFieldsByFieldId': returnFieldsByFieldId,
                'recordMetadata': recordMetadata,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as RecordCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Retrieve a single record. Any "empty" fields (e.g. "", [], or false) in the record will not be returned.
     *
     * @returns {Promise<Record>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async get(baseId: string, tableIdOrName: string, recordId: string): Promise<Record> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Record;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Creates multiple records. Note that table names and table ids can be used interchangeably. We recommend using table IDs so you don't need to modify your API request when your table name changes.
     *
     * @returns {Promise<RecordCollection>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async create(baseId: string, tableIdOrName: string, payload: RecordCollection): Promise<RecordCollection> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as RecordCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates a single record. Table names and table ids can be used interchangeably. We recommend using table IDs so you don't need to modify your API request when your table name changes.
     *
     * @returns {Promise<Record>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async replace(baseId: string, tableIdOrName: string, recordId: string, payload: Record): Promise<Record> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Record;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates up to 10 records, or upserts them when performUpsert is set.
     *
     * @returns {Promise<BulkUpdateResponse>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async replaceAll(baseId: string, tableIdOrName: string, payload: BulkUpdateRequest): Promise<BulkUpdateResponse> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BulkUpdateResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates a single record. Table names and table ids can be used interchangeably. We recommend using table IDs so you don't need to modify your API request when your table name changes.
     *
     * @returns {Promise<Record>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async update(baseId: string, tableIdOrName: string, recordId: string, payload: Record): Promise<Record> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Record;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Updates up to 10 records, or upserts them when performUpsert is set.
     *
     * @returns {Promise<BulkUpdateResponse>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async updateAll(baseId: string, tableIdOrName: string, payload: BulkUpdateRequest): Promise<BulkUpdateResponse> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as BulkUpdateResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Deletes a single record
     *
     * @returns {Promise<DeleteResponse>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async delete(baseId: string, tableIdOrName: string, recordId: string): Promise<DeleteResponse> {
        const url = this.parser.url('/v0/:baseId/:tableIdOrName/:recordId', {
            'baseId': baseId,
            'tableIdOrName': tableIdOrName,
            'recordId': recordId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as DeleteResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
